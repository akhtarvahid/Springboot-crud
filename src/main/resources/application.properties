spring.application.name=ProductService
fakeStore.api.url=https://fakestoreapi.com/products/{id}

# postgresSQL configuration
## database name is "postgres" and Data Source and Drivers name is "springbootcrud"
### DEVELOPMENT
spring.datasource.url=jdbc:postgresql://localhost:5442/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
#connect auth server
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081

#PRODUCTION
#spring.datasource.url=${PRODUCT_SERVICE_DB_URL}
#spring.datasource.username=${PRODUCT_SERVICE_DB_USERNAME}
#spring.datasource.password=${PRODUCT_SERVICE_DB_PASSWORD}
## connect auth server
#spring.security.oauth2.resourceserver.jwt.issuer-uri=${USER_SERVICE_URL}

#LOCAL ENVIRONMENT with cloud RDS db
#spring.datasource.url=jdbc:postgresql://<CLOUD_HOST_URL>:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=postgres
# connect auth server
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8081


# Define specific driver to make it faster otherwise it will search default by going through entire
spring.datasource.driver-class-name=org.postgresql.Driver

# Not required to use it explicitly
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.show-sql=true

# Logging
logging.level.org.springframework.*=trace

# enable it if you're are using AWS elastic cache url
#spring.data.redis.host=http://localhost:6379/